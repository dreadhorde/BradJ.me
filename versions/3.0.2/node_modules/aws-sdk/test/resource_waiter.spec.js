(function() {
  var AWS, helpers;

  helpers = require('./helpers');

  AWS = helpers.AWS;

  describe('AWS.ResourceWaiter', function() {
    return describe('wait', function() {
      it('waits until a given state is met', function() {
        var data, db, err, resp, waiter;
        err = null;
        data = null;
        resp = null;
        db = new AWS.DynamoDB;
        helpers.mockResponses(db, [
          {
            data: {
              Table: {
                TableStatus: 'LOADING'
              }
            }
          }, {
            data: {
              Table: {
                TableStatus: 'LOADING'
              }
            }
          }, {
            data: {
              Table: {
                TableStatus: 'ACTIVE'
              }
            }
          }
        ]);
        waiter = new AWS.ResourceWaiter(db, 'tableExists');
        waiter.wait(function(e, d) {
          resp = this;
          err = e;
          return data = d;
        });
        expect(err).toEqual(null);
        expect(data.Table.TableStatus).toEqual('ACTIVE');
        return expect(resp.retryCount).toEqual(2);
      });
      it('can override the final state', function() {
        var data, db, err, resp, waiter;
        err = null;
        data = null;
        resp = null;
        db = new AWS.DynamoDB;
        helpers.mockResponses(db, [
          {
            data: {
              Table: {
                TableStatus: 'LOADING'
              }
            }
          }, {
            data: {
              Table: {
                TableStatus: 'LOADING'
              }
            }
          }, {
            data: {
              Table: {
                TableStatus: 'ACTIVE'
              }
            }
          }, {
            data: {
              Table: {
                TableStatus: 'FOO'
              }
            }
          }
        ]);
        waiter = new AWS.ResourceWaiter(db, {
          tableExists: 'FOO'
        });
        waiter.wait(function(e, d) {
          resp = this;
          err = e;
          return data = d;
        });
        expect(err).toEqual(null);
        expect(data.Table.TableStatus).toEqual('FOO');
        return expect(resp.retryCount).toEqual(3);
      });
      it('throws an error if terminal state is not configured', function() {
        var e, err;
        try {
          new AWS.ResourceWaiter(new AWS.DynamoDB, 'invalidState');
        } catch (error) {
          e = error;
          err = e;
        }
        return expect(err.message).toEqual('State invalidState not found.');
      });
      it('gives up after a maximum number of retries', function() {
        var _, data, db, err, resp, resps, waiter;
        err = null;
        data = null;
        resp = null;
        db = new AWS.DynamoDB;
        resps = (function() {
          var i, results;
          results = [];
          for (_ = i = 1; i <= 26; _ = ++i) {
            results.push({
              data: {
                Table: {
                  TableStatus: 'LOADING'
                }
              }
            });
          }
          return results;
        })();
        resps.push({
          data: {
            Table: {
              TableStatus: 'ACTIVE'
            }
          }
        });
        helpers.mockResponses(db, resps);
        waiter = new AWS.ResourceWaiter(db, 'tableExists');
        waiter.wait(function(e, d) {
          resp = this;
          err = e;
          return data = d;
        });
        expect(data).toEqual(null);
        expect(err.code).toEqual('ResourceNotReady');
        expect(resp.retryCount).toEqual(25);
        return expect(resp.error.retryDelay).toEqual(20000);
      });
      it('accepts error state as a terminal state', function() {
        var data, err, resp, s3, waiter;
        err = null;
        data = null;
        resp = null;
        s3 = new AWS.S3;
        helpers.mockResponses(s3, [
          {
            httpResponse: {
              statusCode: 200
            }
          }, {
            httpResponse: {
              statusCode: 200
            }
          }, {
            httpResponse: {
              statusCode: 404
            }
          }
        ]);
        waiter = new AWS.ResourceWaiter(s3, 'bucketNotExists');
        waiter.wait({
          Bucket: 'bucket'
        }, function(e, d) {
          resp = this;
          err = e;
          return data = d;
        });
        expect(err).toEqual(null);
        expect(resp.httpResponse.statusCode).toEqual(404);
        return expect(resp.retryCount).toEqual(3);
      });
      return it('fails fast if failure value is found', function() {
        var data, ec2, err, resp, waiter;
        err = null;
        data = null;
        resp = null;
        ec2 = new AWS.EC2;
        helpers.mockResponses(ec2, [
          {
            data: {
              Reservations: [
                {
                  Instances: [
                    {
                      State: {
                        Name: 'pending'
                      }
                    }
                  ]
                }
              ]
            }
          }, {
            data: {
              Reservations: [
                {
                  Instances: [
                    {
                      State: {
                        Name: 'pending'
                      }
                    }
                  ]
                }
              ]
            }
          }, {
            data: {
              Reservations: [
                {
                  Instances: [
                    {
                      State: {
                        Name: 'pending'
                      }
                    }
                  ]
                }
              ]
            }
          }, {
            data: {
              Reservations: [
                {
                  Instances: [
                    {
                      State: {
                        Name: 'terminated'
                      }
                    }
                  ]
                }
              ]
            }
          }, {
            data: {
              Reservations: [
                {
                  Instances: [
                    {
                      State: {
                        Name: 'pending'
                      }
                    }
                  ]
                }
              ]
            }
          }, {
            data: {
              Reservations: [
                {
                  Instances: [
                    {
                      State: {
                        Name: 'running'
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]);
        waiter = new AWS.ResourceWaiter(ec2, 'instanceRunning');
        waiter.wait({
          InstanceIds: ['id-123456']
        }, function(e, d) {
          resp = this;
          err = e;
          return data = d;
        });
        expect(data).toEqual(null);
        expect(err.code).toEqual('ResourceNotReady');
        return expect(resp.retryCount).toEqual(3);
      });
    });
  });

}).call(this);
