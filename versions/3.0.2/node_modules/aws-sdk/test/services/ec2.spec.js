(function() {
  var AWS, helpers;

  helpers = require('../helpers');

  AWS = helpers.AWS;

  describe('AWS.EC2', function() {
    var ec2;
    ec2 = new AWS.EC2();
    describe('proxy support', function() {
      return it('always sets Host header to correct endpoint', function() {
        helpers.mockHttpResponse(200, {}, '');
        ec2 = new AWS.EC2({
          httpOptions: {
            proxy: 'http://__INVALID_HOSTNAME__:9999'
          }
        });
        return ec2.makeRequest('describeInstances', function() {
          return expect(this.request.httpRequest.headers.Host).toEqual('ec2.mock-region.amazonaws.com');
        });
      });
    });
    describe('copySnapshot', function() {
      return it('generates PresignedUrl and DestinationRegion parameters', function() {
        var params;
        spyOn(AWS.util.date, 'getDate').andReturn(new Date(0));
        helpers.mockHttpResponse(200, {}, '');
        params = {
          SourceRegion: 'src-region',
          SourceSnapshotId: 'snap-123456789'
        };
        return ec2.copySnapshot(params, function() {
          var parts;
          parts = this.request.httpRequest.body.split('&').sort();
          return ['AWSAccessKeyId=akid', 'Action=CopySnapshot', 'DestinationRegion=mock-region', 'PresignedUrl=https%3A%2F%2Fec2.src-region.amazonaws.com%2F%3F' + "Action%3DCopySnapshot%26DestinationRegion%3Dmock-region%26SourceRegion%3Dsrc-region" + ("%26SourceSnapshotId%3Dsnap-123456789%26Version%3D" + ec2.api.apiVersion) + "%26X-Amz-Algorithm%3DAWS4-HMAC-SHA256%26X-Amz-Credential%3Dakid%252F19700101" + "%252Fsrc-region%252Fec2%252Faws4_request%26X-Amz-Date%3D19700101T000000Z" + "%26X-Amz-Expires%3D3600%26X-Amz-Security-Token%3Dsession" + "%26X-Amz-Signature%3D014459362191e87b3b175e1e16d007c0c9aaa1fdb2743f8cebdfd8dea0fb0cc2" + "%26X-Amz-SignedHeaders%3Dhost", 'SourceRegion=src-region', 'SourceSnapshotId=snap-123456789'].forEach(function(i) {
            return expect(parts).toContain(i);
          });
        });
      });
    });
    return describe('parseResponse', function() {
      var body, parse;
      body = '';
      parse = function(callback) {
        helpers.mockHttpResponse(400, {}, body);
        return ec2.makeRequest('describeInstances', function(error, data) {
          return callback.call(this, error, data);
        });
      };
      return describe('with error', function() {
        beforeEach(function() {
          return body = "<Response>\n  <Errors>\n    <Error>\n      <Code>InvalidInstanceID.Malformed</Code>\n      <Message>Invalid id: \"i-12345678\"</Message>\n    </Error>\n  </Errors>\n  <RequestID>ab123mno-6432-dceb-asdf-123mno543123</RequestID>\n</Response>";
        });
        it('extracts the error code', function() {
          return parse(function(error, data) {
            expect(error.code).toEqual('InvalidInstanceID.Malformed');
            return expect(data).toEqual(null);
          });
        });
        it('extracts the error message', function() {
          return parse(function(error, data) {
            expect(error.message).toEqual('Invalid id: "i-12345678"');
            return expect(data).toEqual(null);
          });
        });
        return it('returns an empty error when the body is blank', function() {
          body = '';
          return parse(function(error, data) {
            expect(error.code).toEqual(400);
            expect(error.message).toEqual(null);
            return expect(data).toEqual(null);
          });
        });
      });
    });
  });

}).call(this);
