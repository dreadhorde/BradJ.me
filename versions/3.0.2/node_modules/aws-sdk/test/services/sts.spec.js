(function() {
  var AWS, helpers;

  helpers = require('../helpers');

  AWS = helpers.AWS;

  describe('AWS.STS', function() {
    var sts;
    sts = null;
    beforeEach(function() {
      return sts = new AWS.STS();
    });
    describe('credentialsFrom', function() {
      it('returns null if no data is provided', function() {
        return expect(sts.credentialsFrom(null)).toEqual(null);
      });
      it('creates a TemporaryCredentials object with hydrated data', function() {
        var creds;
        creds = sts.credentialsFrom({
          Credentials: {
            AccessKeyId: 'KEY',
            SecretAccessKey: 'SECRET',
            SessionToken: 'TOKEN',
            Expiration: new Date(0)
          }
        });
        expect(creds instanceof AWS.TemporaryCredentials);
        expect(creds.accessKeyId).toEqual('KEY');
        expect(creds.secretAccessKey).toEqual('SECRET');
        expect(creds.sessionToken).toEqual('TOKEN');
        expect(creds.expireTime).toEqual(new Date(0));
        return expect(creds.expired).toEqual(false);
      });
      return it('updates an existing Credentials object with hydrated data', function() {
        var creds, data;
        data = {
          Credentials: {
            AccessKeyId: 'KEY',
            SecretAccessKey: 'SECRET',
            SessionToken: 'TOKEN',
            Expiration: new Date(0)
          }
        };
        creds = new AWS.Credentials;
        sts.credentialsFrom(data, creds);
        expect(creds instanceof AWS.Credentials);
        expect(creds.accessKeyId).toEqual('KEY');
        expect(creds.secretAccessKey).toEqual('SECRET');
        expect(creds.sessionToken).toEqual('TOKEN');
        expect(creds.expireTime).toEqual(new Date(0));
        return expect(creds.expired).toEqual(false);
      });
    });
    describe('assumeRoleWithWebIdentity', function() {
      var service;
      service = new AWS.STS;
      return it('sends an unsigned GET request (params in query string)', function() {
        var params;
        helpers.mockHttpResponse(200, {}, '{}');
        params = {
          RoleArn: 'ARN',
          RoleSessionName: 'NAME',
          WebIdentityToken: 'TOK'
        };
        return service.assumeRoleWithWebIdentity(params, function() {
          var hr;
          hr = this.request.httpRequest;
          expect(hr.method).toEqual('GET');
          expect(hr.body).toEqual('');
          expect(hr.headers['Authorization']).toEqual(void 0);
          expect(hr.headers['Content-Type']).toEqual(void 0);
          return expect(hr.path).toEqual('/?Action=AssumeRoleWithWebIdentity&' + 'RoleArn=ARN&RoleSessionName=NAME&Version=' + service.api.apiVersion + '&WebIdentityToken=TOK');
        });
      });
    });
    return describe('assumeRoleWithSAML', function() {
      var service;
      service = new AWS.STS;
      return it('sends an unsigned GET request (params in query string)', function() {
        var params;
        helpers.mockHttpResponse(200, {}, '{}');
        params = {
          RoleArn: 'ARN',
          PrincipalArn: 'PARN',
          SAMLAssertion: 'OK'
        };
        return service.assumeRoleWithSAML(params, function() {
          var hr;
          hr = this.request.httpRequest;
          expect(hr.method).toEqual('GET');
          expect(hr.body).toEqual('');
          expect(hr.headers['Authorization']).toEqual(void 0);
          expect(hr.headers['Content-Type']).toEqual(void 0);
          return expect(hr.path).toEqual('/?Action=AssumeRoleWithSAML&' + 'PrincipalArn=PARN&RoleArn=ARN&SAMLAssertion=OK&' + 'Version=' + service.api.apiVersion);
        });
      });
    });
  });

}).call(this);
