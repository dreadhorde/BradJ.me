(function() {
  var AWS, helpers;

  helpers = require('./helpers');

  AWS = helpers.AWS;

  if (AWS.util.isNode()) {
    describe('AWS.NodeHttpClient', function() {
      var http;
      http = new AWS.NodeHttpClient();
      describe('maxSockets delegation', function() {
        return it('delegates maxSockets from agent to globalAgent', function() {
          var agent, https;
          https = require('https');
          agent = http.sslAgent();
          expect(https.globalAgent.maxSockets).toEqual(agent.maxSockets);
          https.globalAgent.maxSockets += 1;
          return expect(https.globalAgent.maxSockets).toEqual(agent.maxSockets);
        });
      });
      return describe('handleRequest', function() {
        it('emits error event', function() {
          var error, req;
          error = null;
          req = new AWS.HttpRequest('http://invalid');
          runs(function() {
            return http.handleRequest(req, {}, null, function(err) {
              return error = err;
            });
          });
          waitsFor(function() {
            return error;
          });
          return runs(function() {
            return expect(error.code).toEqual('ENOTFOUND');
          });
        });
        return it('supports timeout in httpOptions', function() {
          var error, numCalls, req;
          error = null;
          numCalls = 0;
          req = new AWS.HttpRequest('http://1.1.1.1');
          runs(function() {
            return http.handleRequest(req, {
              timeout: 1
            }, null, function(err) {
              error = err;
              return numCalls += 1;
            });
          });
          waitsFor((function() {
            return error;
          }), 'Timed out', 100);
          return runs(function() {
            expect(error.code).toEqual('TimeoutError');
            expect(error.message).toEqual('Connection timed out after 1ms');
            return expect(numCalls).toEqual(1);
          });
        });
      });
    });
  }

}).call(this);
