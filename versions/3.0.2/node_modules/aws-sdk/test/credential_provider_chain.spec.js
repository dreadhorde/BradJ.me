(function() {
  var AWS, helpers;

  helpers = require('./helpers');

  AWS = helpers.AWS;

  if (AWS.util.isNode()) {
    describe('AWS.CredentialProviderChain', function() {
      return describe('resolve', function() {
        var chain, defaultProviders;
        chain = null;
        defaultProviders = AWS.CredentialProviderChain.defaultProviders;
        beforeEach(function() {
          process.env = {};
          return chain = new AWS.CredentialProviderChain([
            function() {
              return new AWS.EnvironmentCredentials('AWS');
            }, function() {
              return new AWS.EnvironmentCredentials('AMAZON');
            }
          ]);
        });
        afterEach(function() {
          return AWS.CredentialProviderChain.defaultProviders = defaultProviders;
        });
        it('returns an error by default', function() {
          return chain.resolve(function(err) {
            return expect(err.message).toEqual('Variable AMAZON_ACCESS_KEY_ID not set.');
          });
        });
        it('returns AWS-prefixed credentials found in ENV', function() {
          process.env['AWS_ACCESS_KEY_ID'] = 'akid';
          process.env['AWS_SECRET_ACCESS_KEY'] = 'secret';
          process.env['AWS_SESSION_TOKEN'] = 'session';
          return chain.resolve(function(err, creds) {
            expect(creds.accessKeyId).toEqual('akid');
            expect(creds.secretAccessKey).toEqual('secret');
            return expect(creds.sessionToken).toEqual('session');
          });
        });
        it('returns AMAZON-prefixed credentials found in ENV', function() {
          process.env['AMAZON_ACCESS_KEY_ID'] = 'akid';
          process.env['AMAZON_SECRET_ACCESS_KEY'] = 'secret';
          process.env['AMAZON_SESSION_TOKEN'] = 'session';
          return chain.resolve(function(err, creds) {
            expect(creds.accessKeyId).toEqual('akid');
            expect(creds.secretAccessKey).toEqual('secret');
            return expect(creds.sessionToken).toEqual('session');
          });
        });
        it('prefers AWS credentials to AMAZON credentials', function() {
          process.env['AWS_ACCESS_KEY_ID'] = 'akid';
          process.env['AWS_SECRET_ACCESS_KEY'] = 'secret';
          process.env['AWS_SESSION_TOKEN'] = 'session';
          process.env['AMAZON_ACCESS_KEY_ID'] = 'akid2';
          process.env['AMAZON_SECRET_ACCESS_KEY'] = 'secret2';
          process.env['AMAZON_SESSION_TOKEN'] = 'session2';
          return chain.resolve(function(err, creds) {
            expect(creds.accessKeyId).toEqual('akid');
            expect(creds.secretAccessKey).toEqual('secret');
            return expect(creds.sessionToken).toEqual('session');
          });
        });
        it('uses the defaultProviders property on the constructor', function() {
          AWS.CredentialProviderChain.defaultProviders = [];
          process.env['AWS_ACCESS_KEY_ID'] = 'akid';
          process.env['AWS_SECRET_ACCESS_KEY'] = 'secret';
          process.env['AWS_SESSION_TOKEN'] = 'session';
          chain = new AWS.CredentialProviderChain();
          return chain.resolve(function(err) {
            return expect(err.message).toEqual('No providers');
          });
        });
        it('calls resolve on each provider in the chain, stopping for akid', function() {
          var staticCreds;
          staticCreds = {
            accessKeyId: 'abc',
            secretAccessKey: 'xyz'
          };
          chain = new AWS.CredentialProviderChain([staticCreds]);
          return chain.resolve(function(err, creds) {
            expect(creds.accessKeyId).toEqual('abc');
            expect(creds.secretAccessKey).toEqual('xyz');
            return expect(creds.sessionToken).toEqual(void 0);
          });
        });
        return it('accepts providers as functions, elavuating them during resolution', function() {
          var provider;
          provider = function() {
            return {
              accessKeyId: 'abc',
              secretAccessKey: 'xyz'
            };
          };
          chain = new AWS.CredentialProviderChain([provider]);
          return chain.resolve(function(err, creds) {
            expect(creds.accessKeyId).toEqual('abc');
            expect(creds.secretAccessKey).toEqual('xyz');
            return expect(creds.sessionToken).toEqual(void 0);
          });
        });
      });
    });
  }

}).call(this);
